{"version":3,"sources":["component/EditBlock/settingsBlock.module.css","component/UniversalInput/input.module.css","component/Count/count.module.css","component/PreviewBlock/previewBlock.module.css","App.module.css","component/UniversalButton/btn.module.css","reducer/reducer.ts","localStorage/localStorage.ts","component/UniversalInput/UniversalInput.tsx","component/UniversalButton/UniversalButton.tsx","component/EditBlock/SettingsBlock.tsx","component/Count/Count.tsx","component/PreviewBlock/PreviewBlock.tsx","Router/Routes.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","ACTION_TYPE","reducer","state","action","type","INCREMENT_VALUE","counterSettings","initialValue","maxValue","DECREMENT_VALUE","RESET_VALUE","installedSettings","startCounterValue","SET_MAX_VALUE","maxCounterValue","SET_START_VALUE","APPLYING_SETTINGS","disabled","SAVE_IN_LOCAL_STORAGE","key","stateAsString","JSON","stringify","localStorage","setItem","saveState","THROW_ERROR","error","UniversalInput","onChange","spanText","className","finalClassName","s","errorInput","defaultStyle","inputWrap","inputDesc","value","UniversalButton","callBack","name","count","disabledValue","commonBtn","navLink","linkPath","previousLinkPath","onClickHandler","defineNavLink","defineButton","finalBtnClassName","btnDisabled","btn","to","onClick","line","lineTop","lineLeft","lineRight","lineBottom","SettingsBlock","dispatch","settingsBlock","settingsBlockInput","settingsBlockInputMax","settingsBlockInputStart","settingsBlockBtn","PATH","Preview_Block","Settings_Block","Count","startValue","showText","ClassNameForNum","countFinal","countText","textOrValue","PreviewBlock","previewBlock","btnWrap","Routes","app","path","exact","render","App","dateFromLocalStorage","defaultState","getItem","parse","restoreState","useReducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2400c9cd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsBlock\":\"settingsBlock_settingsBlock__2X9PL\",\"settingsBlockBtn\":\"settingsBlock_settingsBlockBtn__1F-BT\",\"settingsBlockInput\":\"settingsBlock_settingsBlockInput__2O8Q0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"defaultStyle\":\"input_defaultStyle__20niH\",\"inputWrap\":\"input_inputWrap__2Q8oP\",\"inputDesc\":\"input_inputDesc__10D6r\",\"errorInput\":\"input_errorInput__2FO1g\",\"customInput\":\"input_customInput__2LYGv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"count\":\"count_count__3ADD2\",\"countFinal\":\"count_countFinal__2XWJS\",\"countText\":\"count_countText__24bVU\",\"blinkText\":\"count_blinkText__-JBUo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"previewBlock\":\"previewBlock_previewBlock__1EIcP\",\"btnWrap\":\"previewBlock_btnWrap__3hV7a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__-Ccqf\",\"previewBlock\":\"App_previewBlock__1fBKt\",\"editBlock\":\"App_editBlock___cZAQ\",\"btnWrap\":\"App_btnWrap__1O_6p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"btn_btn__omS_V\",\"line\":\"btn_line__1ulnf\",\"lineTop\":\"btn_lineTop__3pisj\",\"lineBottom\":\"btn_lineBottom__3dEE5\",\"lineLeft\":\"btn_lineLeft__2aQ00\",\"lineRight\":\"btn_lineRight__1XqCM\",\"btnDisabled\":\"btn_btnDisabled__3VJyz\"};","import {StateType} from \"../App\";\r\nimport {saveState} from \"../localStorage/localStorage\";\r\n\r\nexport enum ACTION_TYPE {\r\n   INCREMENT_VALUE = 'INCREMENT_VALUE',\r\n   DECREMENT_VALUE = 'DECREMENT_VALUE',\r\n   RESET_VALUE = 'RESET_VALUE',\r\n   SET_MAX_VALUE = 'SET_MAX_VALUE',\r\n   SET_START_VALUE = 'SET_START_VALUE',\r\n   APPLYING_SETTINGS = 'APPLYING_SETTINGS',\r\n   THROW_ERROR = 'THROW_ERROR',\r\n   SAVE_IN_LOCAL_STORAGE = 'SAVE_IN_LOCAL_STORAGE'\r\n}\r\n\r\ntype ActionTypeEnumType = {\r\n   type: ACTION_TYPE.INCREMENT_VALUE | ACTION_TYPE.DECREMENT_VALUE | ACTION_TYPE.RESET_VALUE | ACTION_TYPE.SAVE_IN_LOCAL_STORAGE\r\n}\r\n\r\ntype ActionTypeMaxValue = {\r\n   type: ACTION_TYPE.SET_MAX_VALUE\r\n   maxCounterValue: number\r\n}\r\n\r\ntype ActionTypeStartValue = {\r\n   type: ACTION_TYPE.SET_START_VALUE\r\n   startCounterValue: number\r\n}\r\n\r\ntype ActionTypeError = {\r\n   type: ACTION_TYPE.THROW_ERROR\r\n   error: boolean\r\n}\r\ntype ActionTypeDisabled = {\r\n   type: ACTION_TYPE.APPLYING_SETTINGS\r\n   disabled: boolean\r\n}\r\n\r\nexport type ActionType =\r\n   ActionTypeEnumType\r\n   | ActionTypeStartValue\r\n   | ActionTypeMaxValue\r\n   | ActionTypeDisabled\r\n   | ActionTypeError\r\n\r\n\r\nexport const reducer = (state: StateType, action: ActionType): StateType => {\r\n\r\n   switch (action.type) {\r\n      case ACTION_TYPE.INCREMENT_VALUE :\r\n         return {\r\n            ...state, counterSettings: {\r\n               initialValue: state.counterSettings.initialValue + 1,\r\n               maxValue: state.counterSettings.maxValue\r\n            }\r\n         }\r\n\r\n      case ACTION_TYPE.DECREMENT_VALUE:\r\n         return {\r\n            ...state, counterSettings: {\r\n               initialValue: state.counterSettings.initialValue - 1,\r\n               maxValue: state.counterSettings.maxValue\r\n            }\r\n         }\r\n\r\n      case ACTION_TYPE.RESET_VALUE:\r\n         return {\r\n            ...state, counterSettings: {\r\n               initialValue: state.installedSettings.startCounterValue,\r\n               maxValue: state.counterSettings.maxValue\r\n            }\r\n         }\r\n\r\n      case ACTION_TYPE.SET_MAX_VALUE:\r\n         return {\r\n            ...state, installedSettings: {\r\n               maxCounterValue: action.maxCounterValue,\r\n               startCounterValue: state.installedSettings.startCounterValue\r\n            }\r\n         }\r\n\r\n      case ACTION_TYPE.SET_START_VALUE:\r\n         return {\r\n            ...state, installedSettings: {\r\n               startCounterValue: action.startCounterValue,\r\n               maxCounterValue: state.installedSettings.maxCounterValue\r\n            }\r\n         }\r\n\r\n      case ACTION_TYPE.APPLYING_SETTINGS:\r\n         return {\r\n            ...state,\r\n            disabled: action.disabled,\r\n            counterSettings: {\r\n               initialValue: state.installedSettings.startCounterValue,\r\n               maxValue: state.installedSettings.maxCounterValue\r\n            },\r\n         }\r\n\r\n      case ACTION_TYPE.SAVE_IN_LOCAL_STORAGE:\r\n         saveState('Counter_Settings', state.installedSettings)\r\n         break\r\n\r\n      case ACTION_TYPE.THROW_ERROR:\r\n         return {...state, error: action.error}\r\n\r\n   }\r\n\r\n   return state\r\n}","export function saveState<T>(key: string, state: T) {\r\n   const stateAsString = JSON.stringify(state)\r\n   localStorage.setItem(key, stateAsString)\r\n}\r\n\r\nexport function restoreState<T>(key: string, defaultState: T) {\r\n   let state = defaultState\r\n   const stateAsString = localStorage.getItem(key)\r\n   if (stateAsString !== null) state = JSON.parse(stateAsString) as T\r\n   return state\r\n}\r\n","import React from \"react\";\r\nimport s from './input.module.css'\r\nimport {InputNumber} from 'antd';\r\n\r\ntype UniversalInputType = {\r\n   error: boolean\r\n   initialValue: number\r\n   onChange: (value: number) => void\r\n   spanText: string\r\n   className?: string\r\n}\r\n\r\nexport const UniversalInput: React.FC<UniversalInputType> = (\r\n   {error, initialValue, onChange, spanText, className}) => {\r\n\r\n   const finalClassName = error ? `${s.errorInput} ${s.defaultStyle}` : s.defaultStyle\r\n\r\n   const onChangeHandler = (value: number) => onChange(value)\r\n\r\n\r\n   return (\r\n      <div className={`${s.inputWrap} ${className}`}>\r\n         <span className={s.inputDesc}>{spanText}</span>\r\n         <InputNumber className={finalClassName} type=\"number\" value={initialValue} onChange={onChangeHandler}/>\r\n      </div>\r\n   )\r\n}","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from './btn.module.css'\r\n\r\n\r\ntype PropsType = {\r\n   navLink: boolean\r\n   commonBtn: boolean\r\n   disabled: boolean\r\n   name: string\r\n   previousLinkPath?: string\r\n   linkPath?: string\r\n   disabledValue?: number\r\n   count?: number\r\n   callBack?: () => void\r\n   className?: string\r\n}\r\n\r\nexport const UniversalButton: React.FC<PropsType> = (\r\n   {\r\n      callBack, name, count, disabled,\r\n      disabledValue, commonBtn, navLink,\r\n      linkPath, previousLinkPath, className, ...props\r\n   }) => {\r\n\r\n   const onClickHandler = () => {\r\n      if (callBack) callBack()\r\n   }\r\n\r\n   const defineNavLink = ((count === 0 && disabledValue === 0) || disabled) ? `${previousLinkPath}` : `${linkPath}`\r\n   const defineButton = commonBtn ? disabled : disabled || disabledValue === count\r\n   const finalBtnClassName = defineButton ? `${s.btnDisabled} ${s.btn}` : s.btn\r\n\r\n   return (\r\n      <>\r\n         {navLink\r\n            ? <NavLink to={defineNavLink}>\r\n               <button disabled={defineButton}\r\n                       onClick={onClickHandler}\r\n                       className={` ${finalBtnClassName} ${className}`}>\r\n                  <span className={`${s.line} ${s.lineTop}`}> </span>\r\n                  <span className={`${s.line} ${s.lineLeft}`}> </span>\r\n                  <span className={`${s.line} ${s.lineRight}`}> </span>\r\n                  <span className={`${s.line} ${s.lineBottom}`}> </span>\r\n                  {name}\r\n               </button>\r\n            </NavLink>\r\n            : <button disabled={defineButton}\r\n                      onClick={onClickHandler}\r\n                      className={`${className} ${finalBtnClassName}`}>\r\n               <span className={`${s.line} ${s.lineTop}`}> </span>\r\n               <span className={`${s.line} ${s.lineLeft}`}> </span>\r\n               <span className={`${s.line} ${s.lineRight}`}> </span>\r\n               <span className={`${s.line} ${s.lineBottom}`}> </span>\r\n               {name}\r\n            </button>}\r\n      </>\r\n   )\r\n}","import React from \"react\";\r\nimport s from \"./settingsBlock.module.css\";\r\nimport {UniversalInput} from \"../UniversalInput/UniversalInput\";\r\nimport {UniversalButton} from \"../UniversalButton/UniversalButton\";\r\nimport {StateType} from \"../../App\";\r\nimport {ACTION_TYPE, ActionType} from \"../../reducer/reducer\";\r\nimport {PATH} from \"../../Router/Routes\";\r\n\r\ntype SettingsBlockType = {\r\n   state: StateType\r\n   dispatch: (action: ActionType) => void\r\n}\r\n\r\nexport const SettingsBlock: React.FC<SettingsBlockType> = ({state, dispatch}) => {\r\n\r\n   const onChangeHandlerMaxValue = (value: number) => {\r\n      dispatch({type: ACTION_TYPE.SET_MAX_VALUE, maxCounterValue: value});\r\n\r\n      (value < state.installedSettings.startCounterValue ||\r\n         value < 0 || value === state.installedSettings.startCounterValue ||\r\n         state.installedSettings.startCounterValue < 0)\r\n         ? dispatch({type: ACTION_TYPE.THROW_ERROR, error: true})\r\n         : dispatch({type: ACTION_TYPE.THROW_ERROR, error: false})\r\n   }\r\n\r\n   const onChangeHandlerStartValue = (value: number) => {\r\n      dispatch({type: ACTION_TYPE.SET_START_VALUE, startCounterValue: value});\r\n\r\n      (value > state.installedSettings.maxCounterValue ||\r\n         value < 0 || value === state.installedSettings.maxCounterValue)\r\n         ? dispatch({type: ACTION_TYPE.THROW_ERROR, error: true})\r\n         : dispatch({type: ACTION_TYPE.THROW_ERROR, error: false})\r\n   }\r\n\r\n   const onClickSettingsHandler = () => {\r\n      if (state.installedSettings.maxCounterValue === 0 ||\r\n         state.installedSettings.maxCounterValue === 0) {\r\n         dispatch({type: ACTION_TYPE.THROW_ERROR, error: true})\r\n      } else {\r\n         dispatch({type: ACTION_TYPE.THROW_ERROR, error: false})\r\n         dispatch({type: ACTION_TYPE.APPLYING_SETTINGS, disabled: false})\r\n         dispatch({type: ACTION_TYPE.SAVE_IN_LOCAL_STORAGE})\r\n      }\r\n   }\r\n\r\n   return (\r\n      <div className={s.settingsBlock}>\r\n         <div className={s.settingsBlockInput}>\r\n            <UniversalInput\r\n               className={s.settingsBlockInputMax}\r\n               spanText={'Max Counter Value'}\r\n               initialValue={state.installedSettings.maxCounterValue}\r\n               error={state.error}\r\n               onChange={onChangeHandlerMaxValue}/>\r\n\r\n            <UniversalInput\r\n               className={s.settingsBlockInputStart}\r\n               spanText={'Start Counter Value'}\r\n               initialValue={state.installedSettings.startCounterValue}\r\n               error={state.error}\r\n               onChange={onChangeHandlerStartValue}/>\r\n         </div>\r\n\r\n         <div className={s.settingsBlockBtn}>\r\n            <UniversalButton\r\n               navLink={true}\r\n               linkPath={PATH.Preview_Block}\r\n               previousLinkPath={PATH.Settings_Block}\r\n               disabledValue={state.installedSettings.maxCounterValue}\r\n               count={state.installedSettings.startCounterValue}\r\n               disabled={state.error}\r\n               commonBtn={true}\r\n               name={'set settings'}\r\n               callBack={onClickSettingsHandler}/>\r\n         </div>\r\n\r\n      </div>\r\n   )\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport s from './count.module.css';\r\n\r\ntype CountType = {\r\n   count: number\r\n   maxValue: number\r\n   startValue: number\r\n   showText: boolean\r\n}\r\n\r\nexport const Count: React.FC<CountType> = ({count, maxValue, startValue, showText}) => {\r\n   const ClassNameForNum = `${s.count} ${(count === maxValue || count === startValue) ? s.countFinal : ''}`\r\n   const finalClassName = showText ? s.countText : ClassNameForNum\r\n   const textOrValue = showText ? `Enter values and press 'SET SETTINGS'` : count\r\n\r\n   return (\r\n      <div className={finalClassName}>{textOrValue}</div>\r\n   )\r\n}","import React from \"react\";\r\nimport s from \"./previewBlock.module.css\";\r\nimport {Count} from \"../Count/Count\";\r\nimport {UniversalButton} from \"../UniversalButton/UniversalButton\";\r\nimport {ACTION_TYPE, ActionType} from \"../../reducer/reducer\";\r\nimport {StateType} from \"../../App\";\r\nimport {PATH} from \"../../Router/Routes\";\r\n\r\ntype PreviewBlockType = {\r\n   state: StateType\r\n   dispatch: (action: ActionType) => void\r\n}\r\n\r\nexport const PreviewBlock: React.FC<PreviewBlockType> = ({state, dispatch}) => {\r\n\r\n   const reset = () => dispatch({type: ACTION_TYPE.RESET_VALUE})\r\n   const incrementCount = () => dispatch({type: ACTION_TYPE.INCREMENT_VALUE})\r\n   const decrementCount = () => dispatch({type: ACTION_TYPE.DECREMENT_VALUE})\r\n\r\n\r\n   return (\r\n      <div className={s.previewBlock}>\r\n\r\n         <Count\r\n            showText={state.disabled}\r\n            maxValue={state.counterSettings.maxValue}\r\n            startValue={state.installedSettings.startCounterValue}\r\n            count={state.counterSettings.initialValue}/>\r\n\r\n         <div className={s.btnWrap}>\r\n\r\n            <UniversalButton\r\n               navLink={false}\r\n               commonBtn={false}\r\n               disabled={state.disabled}\r\n               disabledValue={state.counterSettings.maxValue}\r\n               count={state.counterSettings.initialValue}\r\n               name={'increment'}\r\n               callBack={incrementCount}/>\r\n\r\n            <UniversalButton\r\n               navLink={false}\r\n               commonBtn={false}\r\n               disabled={state.disabled}\r\n               disabledValue={state.installedSettings.startCounterValue}\r\n               count={state.counterSettings.initialValue}\r\n               name={'reset'}\r\n               callBack={reset}/>\r\n\r\n            <UniversalButton\r\n               navLink={false}\r\n               commonBtn={false}\r\n               disabled={state.disabled}\r\n               disabledValue={state.counterSettings.initialValue}\r\n               count={state.installedSettings.startCounterValue}\r\n               name={'decrement'}\r\n               callBack={decrementCount}/>\r\n\r\n            <UniversalButton\r\n               navLink={true}\r\n               linkPath={PATH.Settings_Block}\r\n               previousLinkPath={PATH.Preview_Block}\r\n               disabled={state.error}\r\n               commonBtn={true}\r\n               name={'set settings'}/>\r\n         </div>\r\n      </div>\r\n   )\r\n}","import React from 'react'\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport s from \"../App.module.css\";\r\nimport {SettingsBlock} from \"../component/EditBlock/SettingsBlock\";\r\nimport {PreviewBlock} from \"../component/PreviewBlock/PreviewBlock\";\r\nimport {StateType} from \"../App\";\r\nimport {ActionType} from \"../reducer/reducer\";\r\n\r\n\r\nexport const PATH = {\r\n   Settings_Block: '/Settings_Block',\r\n   Preview_Block: '/Preview_Block',\r\n}\r\n\r\ntype RoutesType = {\r\n   state: StateType\r\n   dispatch: (action: ActionType) => void\r\n}\r\n\r\nexport const Routes: React.FC<RoutesType> = ({state, dispatch}) => {\r\n   return (\r\n      <>\r\n         <Switch>\r\n            <div className={s.app}>\r\n               <Route path='/' exact render={() => <Redirect to={PATH.Settings_Block}/>}/>\r\n\r\n               <Route path={PATH.Settings_Block} render={() => <SettingsBlock state={state} dispatch={dispatch}/>}/>\r\n               <Route path={PATH.Preview_Block} render={() => <PreviewBlock state={state} dispatch={dispatch}/>}/>\r\n            </div>\r\n         </Switch>\r\n      </>\r\n   )\r\n}\r\n","import React, {useReducer} from 'react';\nimport {restoreState} from \"./localStorage/localStorage\";\nimport {reducer} from \"./reducer/reducer\";\nimport {HashRouter} from \"react-router-dom\";\nimport {Routes} from \"./Router/Routes\";\n\nexport type  StateType = {\n   disabled: boolean\n   error: boolean\n   installedSettings: {\n      maxCounterValue: number\n      startCounterValue: number\n   }\n   counterSettings: {\n      initialValue: number\n      maxValue: number\n   }\n}\n\ntype RestoreStateType = {\n   maxCounterValue: number\n   startCounterValue: number\n}\n\n\nfunction App() {\n\n   const dateFromLocalStorage = restoreState<RestoreStateType>('Counter_Settings', {\n      maxCounterValue: 0,\n      startCounterValue: 0,\n   })\n\n   const [state, dispatch] = useReducer(reducer, {\n      error: false,\n      disabled: true,\n      installedSettings: dateFromLocalStorage,\n      counterSettings: {initialValue: 0, maxValue: 0}\n   })\n\n\n   return (\n      <HashRouter>\n         <Routes state={state} dispatch={dispatch}/>\n      </HashRouter>\n   )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n   <React.StrictMode>\n      <App/>\n   </React.StrictMode>,\n   document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}